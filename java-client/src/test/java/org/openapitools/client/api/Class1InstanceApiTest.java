/*
 * Chat API SDK
 * The SDK allows you to receive and send messages through your WhatsApp account. [Sign up now](https://app.chat-api.com/)  The Chat API is based on the WhatsApp WEB protocol and excludes the ban both when using libraries from mgp25 and the like. Despite this, your account can be banned by anti-spam system WhatsApp after several clicking the \"block\" button.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: sale@chat-api.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import java.io.File;
import org.openapitools.client.model.InlineResponse200;
import org.openapitools.client.model.InlineResponse2001;
import org.openapitools.client.model.InlineResponse2002;
import org.openapitools.client.model.InlineResponse2003;
import org.openapitools.client.model.InlineResponse2004;
import org.openapitools.client.model.InlineResponse2005;
import org.openapitools.client.model.InlineResponse401;
import org.openapitools.client.model.InstanceStatus;
import org.openapitools.client.model.Settings;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for Class1InstanceApi
 */
@Ignore
public class Class1InstanceApiTest {

    private final Class1InstanceApi api = new Class1InstanceApi();

    
    /**
     * Updates the QR code after its expired
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void expiryTest() throws ApiException {
        InlineResponse2002 response = api.expiry();

        // TODO: test validations
    }
    
    /**
     * Direct link to QR-code in the form of an image, not base64.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getQRCodeTest() throws ApiException {
        File response = api.getQRCode();

        // TODO: test validations
    }
    
    /**
     * Get settings
     *
     * **webhookUrl** - Http or https URL for receiving notifications. For testing, we recommend using [our RequestBin](http://bin.chat-api.com).  **ackNotificationsOn** - Turn on/off ack (message delivered and message viewed) notifications in webhooks. GET method works for the same address.  **chatUpdateOn** - Turn on/off chat update notifications in webhooks. GET method works for the same address.  **videoUploadOn** - Turn on/off receiving video messages.  **proxy** - Socks5 IP address and port proxy for instance.  **guaranteedHooks** - Guarantee webhook delivery. Each webhook will make 20 attempts to send until it receives 200 status from the server.  **ignoreOldMessages** - Do not send webhooks with old messages during authorization.  **processArchive** - Process messages from archived chats.  **instanceStatuses** - Turn on/off collecting instance status changing history.  **webhookStatuses** - Turn on/off collecting messages webhooks statuses.  **statusNotificationsOn** - Turn on/off instance changind status notifications in webhooks.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSettingsTest() throws ApiException {
        Settings response = api.getSettings();

        // TODO: test validations
    }
    
    /**
     * Get the account status and QR code for authorization.
     *
     * Reauthorization is necessary only in case of changing the device or manually pressing \&quot;Logout on all devices\&quot; on the phone. Keep the WhastsApp application open during authorization.  Instance statuses:  **authenticated** -  Authorization passed successfully  **init** -  Initial status   **loading** -  The system is still loading, try again in 1 minute   **got qr code** -  There is a QR code and you need to take a picture of it in the Whatsapp application by going to Menu -&gt; WhatsApp Web -&gt; Add. QR code is valid for one minute.   [Example showing base64 images on a page.](https://stackoverflow.com/questions/31526085/how-to-encode-an-image-into-an-html-file)  Manually easier to get [QR-code as an image](/#getQRCode)    When you request the status of the instance in standby mode (status **\&quot;init\&quot;**), it will automatically turn on. To avoid this behavior, use the **no_wakeup** parameter
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getStatusTest() throws ApiException {
        Boolean full = null;
        Boolean noWakeup = null;
        InstanceStatus response = api.getStatus(full, noWakeup);

        // TODO: test validations
    }
    
    /**
     * Logout from WhatsApp Web to get new QR code.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void logoutTest() throws ApiException {
        InlineResponse200 response = api.logout();

        // TODO: test validations
    }
    
    /**
     * Reboot your whatsapp instance.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void rebootTest() throws ApiException {
        InlineResponse2004 response = api.reboot();

        // TODO: test validations
    }
    
    /**
     * Repeat the manual synchronization attempt with the device
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retryTest() throws ApiException {
        InlineResponse2003 response = api.retry();

        // TODO: test validations
    }
    
    /**
     * Set settings
     *
     * **webhookUrl** - Http or https URL for receiving notifications. For testing, we recommend using [our RequestBin](http://bin.chat-api.com).  **ackNotificationsOn** - Turn on/off ack (message delivered and message viewed) notifications in webhooks. GET method works for the same address.  **chatUpdateOn** - Turn on/off chat update notifications in webhooks. GET method works for the same address.  **videoUploadOn** - Turn on/off receiving video messages.  **proxy** - Socks5 IP address and port proxy for instance.  **guaranteedHooks** - Guarantee webhook delivery. Each webhook will make 20 attempts to send until it receives 200 status from the server.  **ignoreOldMessages** - Do not send webhooks with old messages during authorization.  **processArchive** - Process messages from archived chats.  **instanceStatuses** - Turn on/off collecting instance status changing history.  **webhookStatuses** - Turn on/off collecting messages webhooks statuses.  **statusNotificationsOn** - Turn on/off instance changind status notifications in webhooks.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setSettingsTest() throws ApiException {
        Settings settings = null;
        InlineResponse2005 response = api.setSettings(settings);

        // TODO: test validations
    }
    
    /**
     * Returns the active session if the device has connected another instance of Web WhatsApp
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void takeoverTest() throws ApiException {
        InlineResponse2001 response = api.takeover();

        // TODO: test validations
    }
    
}
