/*
 * Chat API SDK
 * The SDK allows you to receive and send messages through your WhatsApp account. [Sign up now](https://app.chat-api.com/)  The Chat API is based on the WhatsApp WEB protocol and excludes the ban both when using libraries from mgp25 and the like. Despite this, your account can be banned by anti-spam system WhatsApp after several clicking the \"block\" button.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: sale@chat-api.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ForwardMessageRequest;
import org.openapitools.client.model.Messages;
import org.openapitools.client.model.SendContactRequest;
import org.openapitools.client.model.SendFileRequest;
import org.openapitools.client.model.SendLinkRequest;
import org.openapitools.client.model.SendLocationRequest;
import org.openapitools.client.model.SendMessageRequest;
import org.openapitools.client.model.SendMessageStatus;
import org.openapitools.client.model.SendPTTRequest;
import org.openapitools.client.model.SendVCardRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class Class2MessagesApi {
    private ApiClient localVarApiClient;

    public Class2MessagesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public Class2MessagesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for forwardMessage
     * @param forwardMessageRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server response example </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call forwardMessageCall(ForwardMessageRequest forwardMessageRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = forwardMessageRequest;

        // create path and map variables
        String localVarPath = "/forwardMessage";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded", "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "instanceId", "token" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call forwardMessageValidateBeforeCall(ForwardMessageRequest forwardMessageRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'forwardMessageRequest' is set
        if (forwardMessageRequest == null) {
            throw new ApiException("Missing the required parameter 'forwardMessageRequest' when calling forwardMessage(Async)");
        }
        

        okhttp3.Call localVarCall = forwardMessageCall(forwardMessageRequest, _callback);
        return localVarCall;

    }

    /**
     * Forwarding messages to a new or existing chat.
     * Only one of two parameters is needed to determine the destination - chatId or phone.
     * @param forwardMessageRequest  (required)
     * @return SendMessageStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server response example </td><td>  -  </td></tr>
     </table>
     */
    public SendMessageStatus forwardMessage(ForwardMessageRequest forwardMessageRequest) throws ApiException {
        ApiResponse<SendMessageStatus> localVarResp = forwardMessageWithHttpInfo(forwardMessageRequest);
        return localVarResp.getData();
    }

    /**
     * Forwarding messages to a new or existing chat.
     * Only one of two parameters is needed to determine the destination - chatId or phone.
     * @param forwardMessageRequest  (required)
     * @return ApiResponse&lt;SendMessageStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server response example </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SendMessageStatus> forwardMessageWithHttpInfo(ForwardMessageRequest forwardMessageRequest) throws ApiException {
        okhttp3.Call localVarCall = forwardMessageValidateBeforeCall(forwardMessageRequest, null);
        Type localVarReturnType = new TypeToken<SendMessageStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Forwarding messages to a new or existing chat. (asynchronously)
     * Only one of two parameters is needed to determine the destination - chatId or phone.
     * @param forwardMessageRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server response example </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call forwardMessageAsync(ForwardMessageRequest forwardMessageRequest, final ApiCallback<SendMessageStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = forwardMessageValidateBeforeCall(forwardMessageRequest, _callback);
        Type localVarReturnType = new TypeToken<SendMessageStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMessages
     * @param lastMessageNumber The lastMessageNumber parameter from the last response (optional)
     * @param last Displays the last 100 messages. If this parameter is passed, then lastMessageNumber is ignored. (optional, default to false)
     * @param chatId Filter messages by chatId  Chat ID from the message list. Examples: 17633123456@c.us for private messages and 17680561234-1479621234@g.us for the group. (optional)
     * @param limit Sets length of the message list. Default 100. With value 0 returns all messages. (optional)
     * @param minTime Filter messages received after specified time. Example: 946684800. (optional)
     * @param maxTime Filter messages received before specified time. Example: 946684800. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server response example </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMessagesCall(Integer lastMessageNumber, Boolean last, String chatId, Integer limit, Integer minTime, Integer maxTime, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/messages";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (lastMessageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lastMessageNumber", lastMessageNumber));
        }

        if (last != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last", last));
        }

        if (chatId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("chatId", chatId));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (minTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_time", minTime));
        }

        if (maxTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_time", maxTime));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "instanceId", "token" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMessagesValidateBeforeCall(Integer lastMessageNumber, Boolean last, String chatId, Integer limit, Integer minTime, Integer maxTime, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getMessagesCall(lastMessageNumber, last, chatId, limit, minTime, maxTime, _callback);
        return localVarCall;

    }

    /**
     * Get a list of messages.
     * To receive only new messages, pass the **lastMessageNumber** parameter from the last query.  Files from messages are guaranteed to be stored only for 30 days and can be deleted. Download the files as soon as you get to your server.
     * @param lastMessageNumber The lastMessageNumber parameter from the last response (optional)
     * @param last Displays the last 100 messages. If this parameter is passed, then lastMessageNumber is ignored. (optional, default to false)
     * @param chatId Filter messages by chatId  Chat ID from the message list. Examples: 17633123456@c.us for private messages and 17680561234-1479621234@g.us for the group. (optional)
     * @param limit Sets length of the message list. Default 100. With value 0 returns all messages. (optional)
     * @param minTime Filter messages received after specified time. Example: 946684800. (optional)
     * @param maxTime Filter messages received before specified time. Example: 946684800. (optional)
     * @return Messages
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server response example </td><td>  -  </td></tr>
     </table>
     */
    public Messages getMessages(Integer lastMessageNumber, Boolean last, String chatId, Integer limit, Integer minTime, Integer maxTime) throws ApiException {
        ApiResponse<Messages> localVarResp = getMessagesWithHttpInfo(lastMessageNumber, last, chatId, limit, minTime, maxTime);
        return localVarResp.getData();
    }

    /**
     * Get a list of messages.
     * To receive only new messages, pass the **lastMessageNumber** parameter from the last query.  Files from messages are guaranteed to be stored only for 30 days and can be deleted. Download the files as soon as you get to your server.
     * @param lastMessageNumber The lastMessageNumber parameter from the last response (optional)
     * @param last Displays the last 100 messages. If this parameter is passed, then lastMessageNumber is ignored. (optional, default to false)
     * @param chatId Filter messages by chatId  Chat ID from the message list. Examples: 17633123456@c.us for private messages and 17680561234-1479621234@g.us for the group. (optional)
     * @param limit Sets length of the message list. Default 100. With value 0 returns all messages. (optional)
     * @param minTime Filter messages received after specified time. Example: 946684800. (optional)
     * @param maxTime Filter messages received before specified time. Example: 946684800. (optional)
     * @return ApiResponse&lt;Messages&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server response example </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Messages> getMessagesWithHttpInfo(Integer lastMessageNumber, Boolean last, String chatId, Integer limit, Integer minTime, Integer maxTime) throws ApiException {
        okhttp3.Call localVarCall = getMessagesValidateBeforeCall(lastMessageNumber, last, chatId, limit, minTime, maxTime, null);
        Type localVarReturnType = new TypeToken<Messages>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a list of messages. (asynchronously)
     * To receive only new messages, pass the **lastMessageNumber** parameter from the last query.  Files from messages are guaranteed to be stored only for 30 days and can be deleted. Download the files as soon as you get to your server.
     * @param lastMessageNumber The lastMessageNumber parameter from the last response (optional)
     * @param last Displays the last 100 messages. If this parameter is passed, then lastMessageNumber is ignored. (optional, default to false)
     * @param chatId Filter messages by chatId  Chat ID from the message list. Examples: 17633123456@c.us for private messages and 17680561234-1479621234@g.us for the group. (optional)
     * @param limit Sets length of the message list. Default 100. With value 0 returns all messages. (optional)
     * @param minTime Filter messages received after specified time. Example: 946684800. (optional)
     * @param maxTime Filter messages received before specified time. Example: 946684800. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server response example </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMessagesAsync(Integer lastMessageNumber, Boolean last, String chatId, Integer limit, Integer minTime, Integer maxTime, final ApiCallback<Messages> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMessagesValidateBeforeCall(lastMessageNumber, last, chatId, limit, minTime, maxTime, _callback);
        Type localVarReturnType = new TypeToken<Messages>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sendContact
     * @param sendContactRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server response example </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendContactCall(SendContactRequest sendContactRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = sendContactRequest;

        // create path and map variables
        String localVarPath = "/sendContact";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded", "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "instanceId", "token" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendContactValidateBeforeCall(SendContactRequest sendContactRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'sendContactRequest' is set
        if (sendContactRequest == null) {
            throw new ApiException("Missing the required parameter 'sendContactRequest' when calling sendContact(Async)");
        }
        

        okhttp3.Call localVarCall = sendContactCall(sendContactRequest, _callback);
        return localVarCall;

    }

    /**
     * Sending a contact or contact list to a new or existing chat.
     * Only one of two parameters is needed to determine the destination - chatId or phone.
     * @param sendContactRequest  (required)
     * @return SendMessageStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server response example </td><td>  -  </td></tr>
     </table>
     */
    public SendMessageStatus sendContact(SendContactRequest sendContactRequest) throws ApiException {
        ApiResponse<SendMessageStatus> localVarResp = sendContactWithHttpInfo(sendContactRequest);
        return localVarResp.getData();
    }

    /**
     * Sending a contact or contact list to a new or existing chat.
     * Only one of two parameters is needed to determine the destination - chatId or phone.
     * @param sendContactRequest  (required)
     * @return ApiResponse&lt;SendMessageStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server response example </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SendMessageStatus> sendContactWithHttpInfo(SendContactRequest sendContactRequest) throws ApiException {
        okhttp3.Call localVarCall = sendContactValidateBeforeCall(sendContactRequest, null);
        Type localVarReturnType = new TypeToken<SendMessageStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Sending a contact or contact list to a new or existing chat. (asynchronously)
     * Only one of two parameters is needed to determine the destination - chatId or phone.
     * @param sendContactRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server response example </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendContactAsync(SendContactRequest sendContactRequest, final ApiCallback<SendMessageStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendContactValidateBeforeCall(sendContactRequest, _callback);
        Type localVarReturnType = new TypeToken<SendMessageStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sendFile
     * @param sendFileRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server response example </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendFileCall(SendFileRequest sendFileRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = sendFileRequest;

        // create path and map variables
        String localVarPath = "/sendFile";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded", "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "instanceId", "token" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendFileValidateBeforeCall(SendFileRequest sendFileRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'sendFileRequest' is set
        if (sendFileRequest == null) {
            throw new ApiException("Missing the required parameter 'sendFileRequest' when calling sendFile(Async)");
        }
        

        okhttp3.Call localVarCall = sendFileCall(sendFileRequest, _callback);
        return localVarCall;

    }

    /**
     * Send a file to a new or existing chat.
     * Only one of two parameters is needed to determine the destination - chatId or phone.
     * @param sendFileRequest  (required)
     * @return SendMessageStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server response example </td><td>  -  </td></tr>
     </table>
     */
    public SendMessageStatus sendFile(SendFileRequest sendFileRequest) throws ApiException {
        ApiResponse<SendMessageStatus> localVarResp = sendFileWithHttpInfo(sendFileRequest);
        return localVarResp.getData();
    }

    /**
     * Send a file to a new or existing chat.
     * Only one of two parameters is needed to determine the destination - chatId or phone.
     * @param sendFileRequest  (required)
     * @return ApiResponse&lt;SendMessageStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server response example </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SendMessageStatus> sendFileWithHttpInfo(SendFileRequest sendFileRequest) throws ApiException {
        okhttp3.Call localVarCall = sendFileValidateBeforeCall(sendFileRequest, null);
        Type localVarReturnType = new TypeToken<SendMessageStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Send a file to a new or existing chat. (asynchronously)
     * Only one of two parameters is needed to determine the destination - chatId or phone.
     * @param sendFileRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server response example </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendFileAsync(SendFileRequest sendFileRequest, final ApiCallback<SendMessageStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendFileValidateBeforeCall(sendFileRequest, _callback);
        Type localVarReturnType = new TypeToken<SendMessageStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sendLink
     * @param sendLinkRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server response example </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendLinkCall(SendLinkRequest sendLinkRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = sendLinkRequest;

        // create path and map variables
        String localVarPath = "/sendLink";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded", "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "instanceId", "token" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendLinkValidateBeforeCall(SendLinkRequest sendLinkRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'sendLinkRequest' is set
        if (sendLinkRequest == null) {
            throw new ApiException("Missing the required parameter 'sendLinkRequest' when calling sendLink(Async)");
        }
        

        okhttp3.Call localVarCall = sendLinkCall(sendLinkRequest, _callback);
        return localVarCall;

    }

    /**
     * Send text with link and link&#39;s preview to a new or existing chat.
     * Only one of two parameters is needed to determine the destination - chatId or phone.
     * @param sendLinkRequest  (required)
     * @return SendMessageStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server response example </td><td>  -  </td></tr>
     </table>
     */
    public SendMessageStatus sendLink(SendLinkRequest sendLinkRequest) throws ApiException {
        ApiResponse<SendMessageStatus> localVarResp = sendLinkWithHttpInfo(sendLinkRequest);
        return localVarResp.getData();
    }

    /**
     * Send text with link and link&#39;s preview to a new or existing chat.
     * Only one of two parameters is needed to determine the destination - chatId or phone.
     * @param sendLinkRequest  (required)
     * @return ApiResponse&lt;SendMessageStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server response example </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SendMessageStatus> sendLinkWithHttpInfo(SendLinkRequest sendLinkRequest) throws ApiException {
        okhttp3.Call localVarCall = sendLinkValidateBeforeCall(sendLinkRequest, null);
        Type localVarReturnType = new TypeToken<SendMessageStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Send text with link and link&#39;s preview to a new or existing chat. (asynchronously)
     * Only one of two parameters is needed to determine the destination - chatId or phone.
     * @param sendLinkRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server response example </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendLinkAsync(SendLinkRequest sendLinkRequest, final ApiCallback<SendMessageStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendLinkValidateBeforeCall(sendLinkRequest, _callback);
        Type localVarReturnType = new TypeToken<SendMessageStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sendLocation
     * @param sendLocationRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server response example </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendLocationCall(SendLocationRequest sendLocationRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = sendLocationRequest;

        // create path and map variables
        String localVarPath = "/sendLocation";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded", "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "instanceId", "token" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendLocationValidateBeforeCall(SendLocationRequest sendLocationRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'sendLocationRequest' is set
        if (sendLocationRequest == null) {
            throw new ApiException("Missing the required parameter 'sendLocationRequest' when calling sendLocation(Async)");
        }
        

        okhttp3.Call localVarCall = sendLocationCall(sendLocationRequest, _callback);
        return localVarCall;

    }

    /**
     * Sending a location to a new or existing chat.
     * Only one of two parameters is needed to determine the destination - chatId or phone.
     * @param sendLocationRequest  (required)
     * @return SendMessageStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server response example </td><td>  -  </td></tr>
     </table>
     */
    public SendMessageStatus sendLocation(SendLocationRequest sendLocationRequest) throws ApiException {
        ApiResponse<SendMessageStatus> localVarResp = sendLocationWithHttpInfo(sendLocationRequest);
        return localVarResp.getData();
    }

    /**
     * Sending a location to a new or existing chat.
     * Only one of two parameters is needed to determine the destination - chatId or phone.
     * @param sendLocationRequest  (required)
     * @return ApiResponse&lt;SendMessageStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server response example </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SendMessageStatus> sendLocationWithHttpInfo(SendLocationRequest sendLocationRequest) throws ApiException {
        okhttp3.Call localVarCall = sendLocationValidateBeforeCall(sendLocationRequest, null);
        Type localVarReturnType = new TypeToken<SendMessageStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Sending a location to a new or existing chat. (asynchronously)
     * Only one of two parameters is needed to determine the destination - chatId or phone.
     * @param sendLocationRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server response example </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendLocationAsync(SendLocationRequest sendLocationRequest, final ApiCallback<SendMessageStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendLocationValidateBeforeCall(sendLocationRequest, _callback);
        Type localVarReturnType = new TypeToken<SendMessageStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sendMessage
     * @param sendMessageRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server response example </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendMessageCall(SendMessageRequest sendMessageRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = sendMessageRequest;

        // create path and map variables
        String localVarPath = "/sendMessage";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded", "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "instanceId", "token" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendMessageValidateBeforeCall(SendMessageRequest sendMessageRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'sendMessageRequest' is set
        if (sendMessageRequest == null) {
            throw new ApiException("Missing the required parameter 'sendMessageRequest' when calling sendMessage(Async)");
        }
        

        okhttp3.Call localVarCall = sendMessageCall(sendMessageRequest, _callback);
        return localVarCall;

    }

    /**
     * Send a message to a new or existing chat.
     * The message will be added to the queue for sending and delivered even if the phone is disconnected from the Internet or authorization is not passed.  Only one of two parameters is needed to determine the destination - chatId or phone.
     * @param sendMessageRequest  (required)
     * @return SendMessageStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server response example </td><td>  -  </td></tr>
     </table>
     */
    public SendMessageStatus sendMessage(SendMessageRequest sendMessageRequest) throws ApiException {
        ApiResponse<SendMessageStatus> localVarResp = sendMessageWithHttpInfo(sendMessageRequest);
        return localVarResp.getData();
    }

    /**
     * Send a message to a new or existing chat.
     * The message will be added to the queue for sending and delivered even if the phone is disconnected from the Internet or authorization is not passed.  Only one of two parameters is needed to determine the destination - chatId or phone.
     * @param sendMessageRequest  (required)
     * @return ApiResponse&lt;SendMessageStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server response example </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SendMessageStatus> sendMessageWithHttpInfo(SendMessageRequest sendMessageRequest) throws ApiException {
        okhttp3.Call localVarCall = sendMessageValidateBeforeCall(sendMessageRequest, null);
        Type localVarReturnType = new TypeToken<SendMessageStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Send a message to a new or existing chat. (asynchronously)
     * The message will be added to the queue for sending and delivered even if the phone is disconnected from the Internet or authorization is not passed.  Only one of two parameters is needed to determine the destination - chatId or phone.
     * @param sendMessageRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server response example </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendMessageAsync(SendMessageRequest sendMessageRequest, final ApiCallback<SendMessageStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendMessageValidateBeforeCall(sendMessageRequest, _callback);
        Type localVarReturnType = new TypeToken<SendMessageStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sendPTT
     * @param sendPTTRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server response example </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendPTTCall(SendPTTRequest sendPTTRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = sendPTTRequest;

        // create path and map variables
        String localVarPath = "/sendPTT";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded", "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "instanceId", "token" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendPTTValidateBeforeCall(SendPTTRequest sendPTTRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'sendPTTRequest' is set
        if (sendPTTRequest == null) {
            throw new ApiException("Missing the required parameter 'sendPTTRequest' when calling sendPTT(Async)");
        }
        

        okhttp3.Call localVarCall = sendPTTCall(sendPTTRequest, _callback);
        return localVarCall;

    }

    /**
     * Send a ptt-audio to a new or existing chat.
     * Only one of two parameters is needed to determine the destination - chatId or phone.
     * @param sendPTTRequest  (required)
     * @return SendMessageStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server response example </td><td>  -  </td></tr>
     </table>
     */
    public SendMessageStatus sendPTT(SendPTTRequest sendPTTRequest) throws ApiException {
        ApiResponse<SendMessageStatus> localVarResp = sendPTTWithHttpInfo(sendPTTRequest);
        return localVarResp.getData();
    }

    /**
     * Send a ptt-audio to a new or existing chat.
     * Only one of two parameters is needed to determine the destination - chatId or phone.
     * @param sendPTTRequest  (required)
     * @return ApiResponse&lt;SendMessageStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server response example </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SendMessageStatus> sendPTTWithHttpInfo(SendPTTRequest sendPTTRequest) throws ApiException {
        okhttp3.Call localVarCall = sendPTTValidateBeforeCall(sendPTTRequest, null);
        Type localVarReturnType = new TypeToken<SendMessageStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Send a ptt-audio to a new or existing chat. (asynchronously)
     * Only one of two parameters is needed to determine the destination - chatId or phone.
     * @param sendPTTRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server response example </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendPTTAsync(SendPTTRequest sendPTTRequest, final ApiCallback<SendMessageStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendPTTValidateBeforeCall(sendPTTRequest, _callback);
        Type localVarReturnType = new TypeToken<SendMessageStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sendVCard
     * @param sendVCardRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server response example </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendVCardCall(SendVCardRequest sendVCardRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = sendVCardRequest;

        // create path and map variables
        String localVarPath = "/sendVCard";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded", "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "instanceId", "token" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendVCardValidateBeforeCall(SendVCardRequest sendVCardRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'sendVCardRequest' is set
        if (sendVCardRequest == null) {
            throw new ApiException("Missing the required parameter 'sendVCardRequest' when calling sendVCard(Async)");
        }
        

        okhttp3.Call localVarCall = sendVCardCall(sendVCardRequest, _callback);
        return localVarCall;

    }

    /**
     * Sending a vcard to a new or existing chat.
     * Only one of two parameters is needed to determine the destination - chatId or phone.
     * @param sendVCardRequest  (required)
     * @return SendMessageStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server response example </td><td>  -  </td></tr>
     </table>
     */
    public SendMessageStatus sendVCard(SendVCardRequest sendVCardRequest) throws ApiException {
        ApiResponse<SendMessageStatus> localVarResp = sendVCardWithHttpInfo(sendVCardRequest);
        return localVarResp.getData();
    }

    /**
     * Sending a vcard to a new or existing chat.
     * Only one of two parameters is needed to determine the destination - chatId or phone.
     * @param sendVCardRequest  (required)
     * @return ApiResponse&lt;SendMessageStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server response example </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SendMessageStatus> sendVCardWithHttpInfo(SendVCardRequest sendVCardRequest) throws ApiException {
        okhttp3.Call localVarCall = sendVCardValidateBeforeCall(sendVCardRequest, null);
        Type localVarReturnType = new TypeToken<SendMessageStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Sending a vcard to a new or existing chat. (asynchronously)
     * Only one of two parameters is needed to determine the destination - chatId or phone.
     * @param sendVCardRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server response example </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendVCardAsync(SendVCardRequest sendVCardRequest, final ApiCallback<SendMessageStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendVCardValidateBeforeCall(sendVCardRequest, _callback);
        Type localVarReturnType = new TypeToken<SendMessageStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
