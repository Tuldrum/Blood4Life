/*
 * Chat API SDK
 * The SDK allows you to receive and send messages through your WhatsApp account. [Sign up now](https://app.chat-api.com/)  The Chat API is based on the WhatsApp WEB protocol and excludes the ban both when using libraries from mgp25 and the like. Despite this, your account can be banned by anti-spam system WhatsApp after several clicking the \"block\" button.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: sale@chat-api.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.BanSettings;
import org.openapitools.client.model.BanTestAction;
import org.openapitools.client.model.BanTestStatus;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class Class6BanApi {
    private ApiClient localVarApiClient;

    public Class6BanApi() {
        this(Configuration.getDefaultApiClient());
    }

    public Class6BanApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for banTest
     * @param banTestAction  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server response example </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call banTestCall(BanTestAction banTestAction, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = banTestAction;

        // create path and map variables
        String localVarPath = "/banTest";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "instanceId", "token" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call banTestValidateBeforeCall(BanTestAction banTestAction, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'banTestAction' is set
        if (banTestAction == null) {
            throw new ApiException("Missing the required parameter 'banTestAction' when calling banTest(Async)");
        }
        

        okhttp3.Call localVarCall = banTestCall(banTestAction, _callback);
        return localVarCall;

    }

    /**
     * Test ban settings
     * Send the phone number to find out if the instance is banning it
     * @param banTestAction  (required)
     * @return BanTestStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server response example </td><td>  -  </td></tr>
     </table>
     */
    public BanTestStatus banTest(BanTestAction banTestAction) throws ApiException {
        ApiResponse<BanTestStatus> localVarResp = banTestWithHttpInfo(banTestAction);
        return localVarResp.getData();
    }

    /**
     * Test ban settings
     * Send the phone number to find out if the instance is banning it
     * @param banTestAction  (required)
     * @return ApiResponse&lt;BanTestStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server response example </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BanTestStatus> banTestWithHttpInfo(BanTestAction banTestAction) throws ApiException {
        okhttp3.Call localVarCall = banTestValidateBeforeCall(banTestAction, null);
        Type localVarReturnType = new TypeToken<BanTestStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Test ban settings (asynchronously)
     * Send the phone number to find out if the instance is banning it
     * @param banTestAction  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server response example </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call banTestAsync(BanTestAction banTestAction, final ApiCallback<BanTestStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = banTestValidateBeforeCall(banTestAction, _callback);
        Type localVarReturnType = new TypeToken<BanTestStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getBanSettings
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server response example </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBanSettingsCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/banSettings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "instanceId", "token" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBanSettingsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getBanSettingsCall(_callback);
        return localVarCall;

    }

    /**
     * Get settings
     * **banPhoneMask** - Regular expression on which bans on numbers will be sent  **preBanMessage** - Warning message If it is set, a message will be sent before sending the ban.
     * @return BanSettings
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server response example </td><td>  -  </td></tr>
     </table>
     */
    public BanSettings getBanSettings() throws ApiException {
        ApiResponse<BanSettings> localVarResp = getBanSettingsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get settings
     * **banPhoneMask** - Regular expression on which bans on numbers will be sent  **preBanMessage** - Warning message If it is set, a message will be sent before sending the ban.
     * @return ApiResponse&lt;BanSettings&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server response example </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BanSettings> getBanSettingsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getBanSettingsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<BanSettings>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get settings (asynchronously)
     * **banPhoneMask** - Regular expression on which bans on numbers will be sent  **preBanMessage** - Warning message If it is set, a message will be sent before sending the ban.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server response example </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBanSettingsAsync(final ApiCallback<BanSettings> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBanSettingsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<BanSettings>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setBanSettings
     * @param banSettings  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server response example </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setBanSettingsCall(BanSettings banSettings, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = banSettings;

        // create path and map variables
        String localVarPath = "/banSettings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "instanceId", "token" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setBanSettingsValidateBeforeCall(BanSettings banSettings, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'banSettings' is set
        if (banSettings == null) {
            throw new ApiException("Missing the required parameter 'banSettings' when calling setBanSettings(Async)");
        }
        

        okhttp3.Call localVarCall = setBanSettingsCall(banSettings, _callback);
        return localVarCall;

    }

    /**
     * Set settings
     * **banPhoneMask** - Regular expression on which bans on numbers will be sent  **preBanMessage** - Warning message If it is set, a message will be sent before sending the ban.
     * @param banSettings  (required)
     * @return BanSettings
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server response example </td><td>  -  </td></tr>
     </table>
     */
    public BanSettings setBanSettings(BanSettings banSettings) throws ApiException {
        ApiResponse<BanSettings> localVarResp = setBanSettingsWithHttpInfo(banSettings);
        return localVarResp.getData();
    }

    /**
     * Set settings
     * **banPhoneMask** - Regular expression on which bans on numbers will be sent  **preBanMessage** - Warning message If it is set, a message will be sent before sending the ban.
     * @param banSettings  (required)
     * @return ApiResponse&lt;BanSettings&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server response example </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BanSettings> setBanSettingsWithHttpInfo(BanSettings banSettings) throws ApiException {
        okhttp3.Call localVarCall = setBanSettingsValidateBeforeCall(banSettings, null);
        Type localVarReturnType = new TypeToken<BanSettings>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Set settings (asynchronously)
     * **banPhoneMask** - Regular expression on which bans on numbers will be sent  **preBanMessage** - Warning message If it is set, a message will be sent before sending the ban.
     * @param banSettings  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server response example </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setBanSettingsAsync(BanSettings banSettings, final ApiCallback<BanSettings> _callback) throws ApiException {

        okhttp3.Call localVarCall = setBanSettingsValidateBeforeCall(banSettings, _callback);
        Type localVarReturnType = new TypeToken<BanSettings>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
