/*
 * Chat API SDK
 * The SDK allows you to receive and send messages through your WhatsApp account. [Sign up now](https://app.chat-api.com/)  The Chat API is based on the WhatsApp WEB protocol and excludes the ban both when using libraries from mgp25 and the like. Despite this, your account can be banned by anti-spam system WhatsApp after several clicking the \"block\" button.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: sale@chat-api.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Chats;
import org.openapitools.client.model.CreateGroupAction;
import org.openapitools.client.model.CreateGroupStatus;
import org.openapitools.client.model.GroupParticipantAction;
import org.openapitools.client.model.GroupParticipantStatus;
import org.openapitools.client.model.ReadChatAction;
import org.openapitools.client.model.ReadChatStatus;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class Class3ChatsApi {
    private ApiClient localVarApiClient;

    public Class3ChatsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public Class3ChatsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for addGroupParticipant
     * @param groupParticipantAction  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server response example </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addGroupParticipantCall(GroupParticipantAction groupParticipantAction, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = groupParticipantAction;

        // create path and map variables
        String localVarPath = "/addGroupParticipant";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded", "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "instanceId", "token" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addGroupParticipantValidateBeforeCall(GroupParticipantAction groupParticipantAction, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'groupParticipantAction' is set
        if (groupParticipantAction == null) {
            throw new ApiException("Missing the required parameter 'groupParticipantAction' when calling addGroupParticipant(Async)");
        }
        

        okhttp3.Call localVarCall = addGroupParticipantCall(groupParticipantAction, _callback);
        return localVarCall;

    }

    /**
     * Adding participant to a group
     * 
     * @param groupParticipantAction  (required)
     * @return GroupParticipantStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server response example </td><td>  -  </td></tr>
     </table>
     */
    public GroupParticipantStatus addGroupParticipant(GroupParticipantAction groupParticipantAction) throws ApiException {
        ApiResponse<GroupParticipantStatus> localVarResp = addGroupParticipantWithHttpInfo(groupParticipantAction);
        return localVarResp.getData();
    }

    /**
     * Adding participant to a group
     * 
     * @param groupParticipantAction  (required)
     * @return ApiResponse&lt;GroupParticipantStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server response example </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GroupParticipantStatus> addGroupParticipantWithHttpInfo(GroupParticipantAction groupParticipantAction) throws ApiException {
        okhttp3.Call localVarCall = addGroupParticipantValidateBeforeCall(groupParticipantAction, null);
        Type localVarReturnType = new TypeToken<GroupParticipantStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Adding participant to a group (asynchronously)
     * 
     * @param groupParticipantAction  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server response example </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addGroupParticipantAsync(GroupParticipantAction groupParticipantAction, final ApiCallback<GroupParticipantStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = addGroupParticipantValidateBeforeCall(groupParticipantAction, _callback);
        Type localVarReturnType = new TypeToken<GroupParticipantStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for demoteGroupParticipant
     * @param groupParticipantAction  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server response example </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call demoteGroupParticipantCall(GroupParticipantAction groupParticipantAction, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = groupParticipantAction;

        // create path and map variables
        String localVarPath = "/demoteGroupParticipant";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded", "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "instanceId", "token" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call demoteGroupParticipantValidateBeforeCall(GroupParticipantAction groupParticipantAction, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'groupParticipantAction' is set
        if (groupParticipantAction == null) {
            throw new ApiException("Missing the required parameter 'groupParticipantAction' when calling demoteGroupParticipant(Async)");
        }
        

        okhttp3.Call localVarCall = demoteGroupParticipantCall(groupParticipantAction, _callback);
        return localVarCall;

    }

    /**
     * Demote group participant
     * 
     * @param groupParticipantAction  (required)
     * @return GroupParticipantStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server response example </td><td>  -  </td></tr>
     </table>
     */
    public GroupParticipantStatus demoteGroupParticipant(GroupParticipantAction groupParticipantAction) throws ApiException {
        ApiResponse<GroupParticipantStatus> localVarResp = demoteGroupParticipantWithHttpInfo(groupParticipantAction);
        return localVarResp.getData();
    }

    /**
     * Demote group participant
     * 
     * @param groupParticipantAction  (required)
     * @return ApiResponse&lt;GroupParticipantStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server response example </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GroupParticipantStatus> demoteGroupParticipantWithHttpInfo(GroupParticipantAction groupParticipantAction) throws ApiException {
        okhttp3.Call localVarCall = demoteGroupParticipantValidateBeforeCall(groupParticipantAction, null);
        Type localVarReturnType = new TypeToken<GroupParticipantStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Demote group participant (asynchronously)
     * 
     * @param groupParticipantAction  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server response example </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call demoteGroupParticipantAsync(GroupParticipantAction groupParticipantAction, final ApiCallback<GroupParticipantStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = demoteGroupParticipantValidateBeforeCall(groupParticipantAction, _callback);
        Type localVarReturnType = new TypeToken<GroupParticipantStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getChats
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server response example </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getChatsCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dialogs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "instanceId", "token" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getChatsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getChatsCall(_callback);
        return localVarCall;

    }

    /**
     * Get the chat list.
     * The chat list includes avatars.
     * @return Chats
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server response example </td><td>  -  </td></tr>
     </table>
     */
    public Chats getChats() throws ApiException {
        ApiResponse<Chats> localVarResp = getChatsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get the chat list.
     * The chat list includes avatars.
     * @return ApiResponse&lt;Chats&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server response example </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Chats> getChatsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getChatsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Chats>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the chat list. (asynchronously)
     * The chat list includes avatars.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server response example </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getChatsAsync(final ApiCallback<Chats> _callback) throws ApiException {

        okhttp3.Call localVarCall = getChatsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Chats>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for group
     * @param createGroupAction  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server response example </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupCall(CreateGroupAction createGroupAction, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = createGroupAction;

        // create path and map variables
        String localVarPath = "/group";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded", "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "instanceId", "token" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call groupValidateBeforeCall(CreateGroupAction createGroupAction, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'createGroupAction' is set
        if (createGroupAction == null) {
            throw new ApiException("Missing the required parameter 'createGroupAction' when calling group(Async)");
        }
        

        okhttp3.Call localVarCall = groupCall(createGroupAction, _callback);
        return localVarCall;

    }

    /**
     * Creates a group and sends the message to the created group.
     * The group will be added to the queue for sending and sooner or later it will be created, even if the phone is disconnected from the Internet or the authorization is not passed.   2 Oct 2018 update: chatId parameter will be returned if group was created on your phone within 20 second.
     * @param createGroupAction  (required)
     * @return CreateGroupStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server response example </td><td>  -  </td></tr>
     </table>
     */
    public CreateGroupStatus group(CreateGroupAction createGroupAction) throws ApiException {
        ApiResponse<CreateGroupStatus> localVarResp = groupWithHttpInfo(createGroupAction);
        return localVarResp.getData();
    }

    /**
     * Creates a group and sends the message to the created group.
     * The group will be added to the queue for sending and sooner or later it will be created, even if the phone is disconnected from the Internet or the authorization is not passed.   2 Oct 2018 update: chatId parameter will be returned if group was created on your phone within 20 second.
     * @param createGroupAction  (required)
     * @return ApiResponse&lt;CreateGroupStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server response example </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateGroupStatus> groupWithHttpInfo(CreateGroupAction createGroupAction) throws ApiException {
        okhttp3.Call localVarCall = groupValidateBeforeCall(createGroupAction, null);
        Type localVarReturnType = new TypeToken<CreateGroupStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a group and sends the message to the created group. (asynchronously)
     * The group will be added to the queue for sending and sooner or later it will be created, even if the phone is disconnected from the Internet or the authorization is not passed.   2 Oct 2018 update: chatId parameter will be returned if group was created on your phone within 20 second.
     * @param createGroupAction  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server response example </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupAsync(CreateGroupAction createGroupAction, final ApiCallback<CreateGroupStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = groupValidateBeforeCall(createGroupAction, _callback);
        Type localVarReturnType = new TypeToken<CreateGroupStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for promoteGroupParticipant
     * @param groupParticipantAction  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server response example </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call promoteGroupParticipantCall(GroupParticipantAction groupParticipantAction, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = groupParticipantAction;

        // create path and map variables
        String localVarPath = "/promoteGroupParticipant";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded", "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "instanceId", "token" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call promoteGroupParticipantValidateBeforeCall(GroupParticipantAction groupParticipantAction, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'groupParticipantAction' is set
        if (groupParticipantAction == null) {
            throw new ApiException("Missing the required parameter 'groupParticipantAction' when calling promoteGroupParticipant(Async)");
        }
        

        okhttp3.Call localVarCall = promoteGroupParticipantCall(groupParticipantAction, _callback);
        return localVarCall;

    }

    /**
     * Make participant in the group an administrator
     * 
     * @param groupParticipantAction  (required)
     * @return GroupParticipantStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server response example </td><td>  -  </td></tr>
     </table>
     */
    public GroupParticipantStatus promoteGroupParticipant(GroupParticipantAction groupParticipantAction) throws ApiException {
        ApiResponse<GroupParticipantStatus> localVarResp = promoteGroupParticipantWithHttpInfo(groupParticipantAction);
        return localVarResp.getData();
    }

    /**
     * Make participant in the group an administrator
     * 
     * @param groupParticipantAction  (required)
     * @return ApiResponse&lt;GroupParticipantStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server response example </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GroupParticipantStatus> promoteGroupParticipantWithHttpInfo(GroupParticipantAction groupParticipantAction) throws ApiException {
        okhttp3.Call localVarCall = promoteGroupParticipantValidateBeforeCall(groupParticipantAction, null);
        Type localVarReturnType = new TypeToken<GroupParticipantStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Make participant in the group an administrator (asynchronously)
     * 
     * @param groupParticipantAction  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server response example </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call promoteGroupParticipantAsync(GroupParticipantAction groupParticipantAction, final ApiCallback<GroupParticipantStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = promoteGroupParticipantValidateBeforeCall(groupParticipantAction, _callback);
        Type localVarReturnType = new TypeToken<GroupParticipantStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for readChat
     * @param readChatAction  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server response example </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call readChatCall(ReadChatAction readChatAction, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = readChatAction;

        // create path and map variables
        String localVarPath = "/readChat";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded", "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "instanceId", "token" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call readChatValidateBeforeCall(ReadChatAction readChatAction, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'readChatAction' is set
        if (readChatAction == null) {
            throw new ApiException("Missing the required parameter 'readChatAction' when calling readChat(Async)");
        }
        

        okhttp3.Call localVarCall = readChatCall(readChatAction, _callback);
        return localVarCall;

    }

    /**
     * Open chat for reading messages
     * Use this method to make users see their messages read.
     * @param readChatAction  (required)
     * @return ReadChatStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server response example </td><td>  -  </td></tr>
     </table>
     */
    public ReadChatStatus readChat(ReadChatAction readChatAction) throws ApiException {
        ApiResponse<ReadChatStatus> localVarResp = readChatWithHttpInfo(readChatAction);
        return localVarResp.getData();
    }

    /**
     * Open chat for reading messages
     * Use this method to make users see their messages read.
     * @param readChatAction  (required)
     * @return ApiResponse&lt;ReadChatStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server response example </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReadChatStatus> readChatWithHttpInfo(ReadChatAction readChatAction) throws ApiException {
        okhttp3.Call localVarCall = readChatValidateBeforeCall(readChatAction, null);
        Type localVarReturnType = new TypeToken<ReadChatStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Open chat for reading messages (asynchronously)
     * Use this method to make users see their messages read.
     * @param readChatAction  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server response example </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call readChatAsync(ReadChatAction readChatAction, final ApiCallback<ReadChatStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = readChatValidateBeforeCall(readChatAction, _callback);
        Type localVarReturnType = new TypeToken<ReadChatStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeGroupParticipant
     * @param groupParticipantAction  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server response example </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeGroupParticipantCall(GroupParticipantAction groupParticipantAction, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = groupParticipantAction;

        // create path and map variables
        String localVarPath = "/removeGroupParticipant";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded", "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "instanceId", "token" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeGroupParticipantValidateBeforeCall(GroupParticipantAction groupParticipantAction, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'groupParticipantAction' is set
        if (groupParticipantAction == null) {
            throw new ApiException("Missing the required parameter 'groupParticipantAction' when calling removeGroupParticipant(Async)");
        }
        

        okhttp3.Call localVarCall = removeGroupParticipantCall(groupParticipantAction, _callback);
        return localVarCall;

    }

    /**
     * Remove participant from a group
     * 
     * @param groupParticipantAction  (required)
     * @return GroupParticipantStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server response example </td><td>  -  </td></tr>
     </table>
     */
    public GroupParticipantStatus removeGroupParticipant(GroupParticipantAction groupParticipantAction) throws ApiException {
        ApiResponse<GroupParticipantStatus> localVarResp = removeGroupParticipantWithHttpInfo(groupParticipantAction);
        return localVarResp.getData();
    }

    /**
     * Remove participant from a group
     * 
     * @param groupParticipantAction  (required)
     * @return ApiResponse&lt;GroupParticipantStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server response example </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GroupParticipantStatus> removeGroupParticipantWithHttpInfo(GroupParticipantAction groupParticipantAction) throws ApiException {
        okhttp3.Call localVarCall = removeGroupParticipantValidateBeforeCall(groupParticipantAction, null);
        Type localVarReturnType = new TypeToken<GroupParticipantStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remove participant from a group (asynchronously)
     * 
     * @param groupParticipantAction  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server response example </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeGroupParticipantAsync(GroupParticipantAction groupParticipantAction, final ApiCallback<GroupParticipantStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeGroupParticipantValidateBeforeCall(groupParticipantAction, _callback);
        Type localVarReturnType = new TypeToken<GroupParticipantStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
