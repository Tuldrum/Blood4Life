/*
 * Chat API SDK
 * The SDK allows you to receive and send messages through your WhatsApp account. [Sign up now](https://app.chat-api.com/)  The Chat API is based on the WhatsApp WEB protocol and excludes the ban both when using libraries from mgp25 and the like. Despite this, your account can be banned by anti-spam system WhatsApp after several clicking the \"block\" button.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: sale@chat-api.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Statuses;
import org.openapitools.client.model.WebhookStatus;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class Class7TestingApi {
    private ApiClient localVarApiClient;

    public Class7TestingApi() {
        this(Configuration.getDefaultApiClient());
    }

    public Class7TestingApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for instanceStatuses
     * @param minTime Filter statuses received after specified date. Example: 946684800. (optional)
     * @param maxTime Filter statuses received before specified date. Example: 946684800. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server response example </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call instanceStatusesCall(Integer minTime, Integer maxTime, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/instanceStatuses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (minTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_time", minTime));
        }

        if (maxTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_time", maxTime));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "instanceId", "token" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call instanceStatusesValidateBeforeCall(Integer minTime, Integer maxTime, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = instanceStatusesCall(minTime, maxTime, _callback);
        return localVarCall;

    }

    /**
     * Returns instance status changes history.
     * Requires enable \&quot;instanceStatuses\&quot; option for collecting data.
     * @param minTime Filter statuses received after specified date. Example: 946684800. (optional)
     * @param maxTime Filter statuses received before specified date. Example: 946684800. (optional)
     * @return Statuses
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server response example </td><td>  -  </td></tr>
     </table>
     */
    public Statuses instanceStatuses(Integer minTime, Integer maxTime) throws ApiException {
        ApiResponse<Statuses> localVarResp = instanceStatusesWithHttpInfo(minTime, maxTime);
        return localVarResp.getData();
    }

    /**
     * Returns instance status changes history.
     * Requires enable \&quot;instanceStatuses\&quot; option for collecting data.
     * @param minTime Filter statuses received after specified date. Example: 946684800. (optional)
     * @param maxTime Filter statuses received before specified date. Example: 946684800. (optional)
     * @return ApiResponse&lt;Statuses&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server response example </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Statuses> instanceStatusesWithHttpInfo(Integer minTime, Integer maxTime) throws ApiException {
        okhttp3.Call localVarCall = instanceStatusesValidateBeforeCall(minTime, maxTime, null);
        Type localVarReturnType = new TypeToken<Statuses>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns instance status changes history. (asynchronously)
     * Requires enable \&quot;instanceStatuses\&quot; option for collecting data.
     * @param minTime Filter statuses received after specified date. Example: 946684800. (optional)
     * @param maxTime Filter statuses received before specified date. Example: 946684800. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server response example </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call instanceStatusesAsync(Integer minTime, Integer maxTime, final ApiCallback<Statuses> _callback) throws ApiException {

        okhttp3.Call localVarCall = instanceStatusesValidateBeforeCall(minTime, maxTime, _callback);
        Type localVarReturnType = new TypeToken<Statuses>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webhookStatuses
     * @param msgId Message ID. Example: false_17472822486@c.us_DF38E6A25B42CC8CCE57EC40F. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server response example </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webhookStatusesCall(String msgId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/webhookStatus";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (msgId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("msgId", msgId));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "instanceId", "token" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webhookStatusesValidateBeforeCall(String msgId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'msgId' is set
        if (msgId == null) {
            throw new ApiException("Missing the required parameter 'msgId' when calling webhookStatuses(Async)");
        }
        

        okhttp3.Call localVarCall = webhookStatusesCall(msgId, _callback);
        return localVarCall;

    }

    /**
     * Returns webhook status for message.
     * Requires enable \&quot;webhookStatuses\&quot; option for collecting data.
     * @param msgId Message ID. Example: false_17472822486@c.us_DF38E6A25B42CC8CCE57EC40F. (required)
     * @return WebhookStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server response example </td><td>  -  </td></tr>
     </table>
     */
    public WebhookStatus webhookStatuses(String msgId) throws ApiException {
        ApiResponse<WebhookStatus> localVarResp = webhookStatusesWithHttpInfo(msgId);
        return localVarResp.getData();
    }

    /**
     * Returns webhook status for message.
     * Requires enable \&quot;webhookStatuses\&quot; option for collecting data.
     * @param msgId Message ID. Example: false_17472822486@c.us_DF38E6A25B42CC8CCE57EC40F. (required)
     * @return ApiResponse&lt;WebhookStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server response example </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WebhookStatus> webhookStatusesWithHttpInfo(String msgId) throws ApiException {
        okhttp3.Call localVarCall = webhookStatusesValidateBeforeCall(msgId, null);
        Type localVarReturnType = new TypeToken<WebhookStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns webhook status for message. (asynchronously)
     * Requires enable \&quot;webhookStatuses\&quot; option for collecting data.
     * @param msgId Message ID. Example: false_17472822486@c.us_DF38E6A25B42CC8CCE57EC40F. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server response example </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webhookStatusesAsync(String msgId, final ApiCallback<WebhookStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = webhookStatusesValidateBeforeCall(msgId, _callback);
        Type localVarReturnType = new TypeToken<WebhookStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
