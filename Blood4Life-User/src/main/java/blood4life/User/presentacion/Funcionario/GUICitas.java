package blood4life.User.presentacion.Funcionario;

import blood4life.User.domain.commands.CreateCommand;
import blood4life.User.domain.commands.DeleteCommand;
import blood4life.User.domain.commands.FindAllCommand;
import blood4life.User.domain.commands.FindCommand;
import blood4life.User.domain.commands.Invoker;
import blood4life.User.domain.commands.UpdateCommand;
import blood4life.User.domain.services.GestorServicesImpl;
import blood4life.User.domain.services.ServicesEnum;
import blood4life.User.infra.Messages;
import blood4life.commons.domain.Cita;
import blood4life.commons.domain.LugarRecogida;
import blood4life.commons.infra.Utilities;
import java.sql.Date;
import java.sql.Time;
import java.util.ArrayList;
import javax.swing.table.DefaultTableModel;

import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

public class GUICitas extends javax.swing.JFrame {

    /**
     *
     */
    private static final long serialVersionUID = 1L;
    /**
     * Instancia del invocador para poder enviar comandos al receptor
     * FoodService
     */
    private final Invoker invoker;
    GestorServicesImpl serv;
    private LugarRecogida lugar;
    
    
    /**
     * Constructor
     */
    public GUICitas(LugarRecogida lugar, GestorServicesImpl serv) {
        this.lugar = lugar;  
        invoker = new Invoker();
        this.serv = serv;
        initComponents();
        setSize(988, 498);
        loadDataTable();
        initStateButtons();
        setLocationRelativeTo(null);
    }

    /**
     * Poner los botones en su estado inicial
     */
    private void initStateButtons() {
        btnAdd.setEnabled(false);
        btnUpdate.setEnabled(false);
        btnDelete.setEnabled(false);
        btnUndo.setEnabled(invoker.hasCommandUndo());
    }

    /**
     * Carga las comidas en el jTable
     */
    @SuppressWarnings("unchecked")
    private void loadDataTable() {
        try {
            ArrayList<Object> args = new ArrayList<Object>();
            args.add(Utilities.ActualDateToDateSQL());
            args.add(lugar.getLugar_id());

            invoker.setCommand(new FindAllCommand(args, serv.getImpl(ServicesEnum.CitaService)));
            invoker.execute();

            FindAllCommand findAllCommand = (FindAllCommand) invoker.getCommand();
            List<Cita> components = (List<Cita>) findAllCommand.getList();
            if (components.size() > 0) {
                DefaultTableModel modelTable = (DefaultTableModel) tblData.getModel();
                clearData(modelTable);
                for (Cita component : components) {
                    Object[] fila = new Object[4];
                    fila[0] = String.valueOf(component.getCodigo());
                    fila[1] = component.getCupos();
                    fila[2] = component.getFecha();
                    fila[3] = component.getHora();
                    modelTable.addRow(fila);
                }
            } else {
                Messages.confirmMessage("Sin citas disponibles para este lugar", "informaciÃ³n");
            }
        } catch (Exception ex) {
            Logger.getLogger(GUICitas.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * Elimina las filas del jTable
     *
     * @param modelTable modelo de datos del jTable
     */
    private void clearData(DefaultTableModel modelTable) {
        while (modelTable.getRowCount() > 0) {
            modelTable.removeRow(0);
        }
    }

    /**
     * Mensaje inicial del panel superior
     */
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlCentro = new javax.swing.JPanel();
        lblId = new javax.swing.JLabel();
        txtId = new javax.swing.JTextField();
        lblCupos = new javax.swing.JLabel();
        txtCupos = new javax.swing.JTextField();
        lblFecha = new javax.swing.JLabel();
        lblFecha1 = new javax.swing.JLabel();
        jDateChooser1 = new com.toedter.calendar.JDateChooser();
        txtCupos1 = new javax.swing.JTextField();
        pnlSur = new javax.swing.JPanel();
        btnAdd = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnUndo = new javax.swing.JButton();
        btnClose = new javax.swing.JButton();
        pnlEste = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblData = new javax.swing.JTable();

        setTitle("Lugares ");

        pnlCentro.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        lblId.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblId.setText("*Id:");

        txtId.setPreferredSize(new java.awt.Dimension(150, 32));
        txtId.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtIdFocusLost(evt);
            }
        });
        txtId.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtIdKeyPressed(evt);
            }
        });

        lblCupos.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblCupos.setText("*Cupos:");

        lblFecha.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblFecha.setText("*Fecha");

        lblFecha1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblFecha1.setText("*Hora");

        javax.swing.GroupLayout pnlCentroLayout = new javax.swing.GroupLayout(pnlCentro);
        pnlCentro.setLayout(pnlCentroLayout);
        pnlCentroLayout.setHorizontalGroup(
            pnlCentroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCentroLayout.createSequentialGroup()
                .addGroup(pnlCentroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlCentroLayout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(lblId, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlCentroLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lblCupos, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlCentroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(lblFecha1, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblFecha, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(pnlCentroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(txtCupos, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jDateChooser1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtCupos1, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtId, javax.swing.GroupLayout.DEFAULT_SIZE, 270, Short.MAX_VALUE))
                .addContainerGap(26, Short.MAX_VALUE))
        );
        pnlCentroLayout.setVerticalGroup(
            pnlCentroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCentroLayout.createSequentialGroup()
                .addGap(1, 1, 1)
                .addGroup(pnlCentroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblId, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlCentroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCupos, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtCupos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(pnlCentroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlCentroLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblFecha, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlCentroLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jDateChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                .addGroup(pnlCentroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblFecha1, javax.swing.GroupLayout.DEFAULT_SIZE, 83, Short.MAX_VALUE)
                    .addComponent(txtCupos1))
                .addGap(85, 85, 85))
        );

        pnlSur.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        btnAdd.setText("Agregar");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });
        pnlSur.add(btnAdd);

        btnUpdate.setText("Modificar");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });
        pnlSur.add(btnUpdate);

        btnDelete.setText("Eliminar");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });
        pnlSur.add(btnDelete);

        btnUndo.setText("Deshacer");
        btnUndo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUndoActionPerformed(evt);
            }
        });
        pnlSur.add(btnUndo);

        btnClose.setText("Cerrar");
        btnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseActionPerformed(evt);
            }
        });
        pnlSur.add(btnClose);

        pnlEste.setBorder(new javax.swing.border.MatteBorder(null));
        pnlEste.setLayout(new java.awt.BorderLayout());

        tblData.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Cupos", "Fecha", "Hora"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblData);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(pnlCentro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 454, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 24, Short.MAX_VALUE)
                .addComponent(pnlEste, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2))
            .addGroup(layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addComponent(pnlSur, javax.swing.GroupLayout.PREFERRED_SIZE, 964, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(pnlEste, javax.swing.GroupLayout.PREFERRED_SIZE, 361, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(99, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addComponent(pnlCentro, javax.swing.GroupLayout.PREFERRED_SIZE, 370, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 387, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlSur, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(18, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnCloseActionPerformed
    public String getTxtyId() {
        return txtId.getText();
    }

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        try {
            String idCita = txtId.getText();
            if (idCita.isEmpty()) {
                Messages.warningMessage("Debe agregar un ID a la cita", "AtenciÃ³n");
                txtId.requestFocus();
                return;
            }

            int id = Integer.parseInt(txtId.getText());
            int cupos = Integer.parseInt(txtCupos.getText());

            Date fecha = Utilities.DateToDateSQL(jDateChooser1.getDate());
            Time hora = Time.valueOf(txtCupos1.getText());

            addCita(id, cupos, fecha, hora);

            Messages.successMessage("Cita agregada con Ã©xito", "AtenciÃ³n");
            clearControls();
            initStateButtons();
            loadDataTable();
        } catch (Exception ex) {
            Logger.getLogger(GUICitas.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_btnAddActionPerformed

    /**
     * Llama a la logica de negocio para agregar la cita mediante el comando
     *
     * @param id identificador de la cita
     * @param cupos
     * @param fecha fecha de la cita
     * @param hora hora de la cita
     */
    private void addCita(int codigo, int cupos, Date fecha, Time hora) throws Exception {
        Cita cita = new Cita(codigo, cupos, lugar, fecha, hora);
        //Fija el comando del invoker
        invoker.setCommand(new CreateCommand(cita, serv.getImpl(ServicesEnum.CitaService)));
        //Ejecuta el comando
        invoker.execute();
    }


    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        String idCita = txtId.getText();
        if (idCita.isEmpty()) {
            Messages.warningMessage("Debe agregar un ID para la cita", "AtenciÃ³n");
            txtId.requestFocus();
            return;
        }
        // Preparar los datos
        int id = Integer.parseInt(txtId.getText());
        int cupos = Integer.parseInt(txtCupos.getText());
        Date fecha = Utilities.DateToDateSQL(jDateChooser1.getDate());
        Time hora = Time.valueOf(txtCupos1.getText());

        //Crea la cita con los nuevos datos
        Cita cita = new Cita(id, cupos,lugar, fecha, hora);

        try {
            // Traer la cita previa
            invoker.setCommand(new FindCommand(String.valueOf(id), serv.getImpl(ServicesEnum.CitaService)));
        } catch (Exception ex) {
            Logger.getLogger(GUICitas.class.getName()).log(Level.SEVERE, null, ex);
        }
        FindCommand findcommand = (FindCommand) invoker.getCommand();
        findcommand.setArgs(String.valueOf(id));
        invoker.execute();

        //la cita previa debe crearse en una nueva instancia
        Cita compAux = (Cita) findcommand.getElement();
        Cita previous = new Cita(compAux.getCodigo(), compAux.getCupos(),lugar, compAux.getFecha(), compAux.getHora());

        //Modifica la cita y guarda el previo
        updateCita(cita, previous);

        Messages.successMessage("Lugar modificada con Ã©xito", "AtenciÃ³n");
        clearControls();
        initStateButtons();
        try {
            loadDataTable();
        } catch (Exception ex) {
            Logger.getLogger(GUICitas.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnUpdateActionPerformed
    /**
     * Llama a la logica de negocio para modificar comida mediante el comando
     *
     * @param food lugar a editar
     * @param previous lugar antes de ser modificada
     */
    private void updateCita(Cita cita, Cita previous) {
        try {
            //Fija el UpdateCommand
            invoker.setCommand(new UpdateCommand(cita, serv.getImpl(ServicesEnum.CitaService)));
            UpdateCommand updateCommand = (UpdateCommand) invoker.getCommand();
            //Fija la cita  previa
            updateCommand.setPrevious(previous);
            //Ejecuta el comando
            invoker.execute();
        } catch (Exception ex) {
            Logger.getLogger(GUICitas.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void txtIdFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtIdFocusLost
        String strId = txtId.getText().trim();
        if (strId.isEmpty()) {
            return;
        }

        try {
            //Fija el comando del invoker para buscar cita por id
            invoker.setCommand(new FindCommand(null, serv.getImpl(ServicesEnum.CitaService)));
        } catch (Exception ex) {
            Logger.getLogger(GUICitas.class.getName()).log(Level.SEVERE, null, ex);
        }
        //Pasa parÃ¡metros al comando
        FindCommand findByIdCommand = (FindCommand) invoker.getCommand();
        findByIdCommand.setArgs(strId);
        //Ejecuta el comando
        invoker.execute();
        Cita cita = (Cita) findByIdCommand.getElement();

        if (cita == null) {
            //Agregar
            btnAdd.setEnabled(true);
            btnUndo.setEnabled(false);
            btnUpdate.setEnabled(false);
            btnDelete.setEnabled(false);

        } else {
            //Editar
            btnUpdate.setEnabled(true);
            btnDelete.setEnabled(true);
            btnUndo.setEnabled(false);
            txtCupos.setText(String.valueOf(cita.getCupos()));
            jDateChooser1.setDate(cita.getFecha());
            txtCupos1.setText(cita.getHora().toString());
            txtCupos1.setText(cita.getHora().toString());
        }
    }//GEN-LAST:event_txtIdFocusLost

    private void btnUndoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUndoActionPerformed
        //Ejecuta el comando deshacer
        invoker.undo();
        try {
            loadDataTable();
        } catch (Exception ex) {
            Logger.getLogger(GUICitas.class.getName()).log(Level.SEVERE, null, ex);
        }
        initStateButtons();
    }//GEN-LAST:event_btnUndoActionPerformed

    private void txtIdKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtIdKeyPressed
        if (evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER) {
            txtIdFocusLost(null);
            txtCupos.requestFocus();
        }
    }//GEN-LAST:event_txtIdKeyPressed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        try {
            String strId = txtId.getText().trim();

            // Traer la cita previa
            invoker.setCommand(new FindCommand(strId, serv.getImpl(ServicesEnum.CitaService)));
            FindCommand findByIdCommand = (FindCommand) invoker.getCommand();
            invoker.execute();
            Cita compAux = (Cita) findByIdCommand.getElement();
            Cita cita = new Cita(compAux.getCodigo(), compAux.getCupos(), lugar, compAux.getFecha(), compAux.getHora());

            //Elimina la cita
            deleteCita(cita);

            Messages.successMessage("Comida eliminada con Ã©xito", "AtenciÃ³n");
            clearControls();
            initStateButtons();
            loadDataTable();
        } catch (Exception ex) {
            Logger.getLogger(GUICitas.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    /**
     * Llama a la logica de negocio para cita mediante el comando
     *
     * @param cita cita a eliminar
     *
     */
    private void deleteCita(Cita cita) {
        try {
            //Fija el comando del invoker
            invoker.setCommand(new DeleteCommand(cita, serv.getImpl(ServicesEnum.CitaService)));
            DeleteCommand cmd = (DeleteCommand) invoker.getCommand();  
            cmd.setPrevious(cita);
            //Ejecuta el comando
            invoker.execute();
        } catch (Exception ex) {
            Logger.getLogger(GUICitas.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * Limpia las cajas de texto
     */
    public void clearControls() {
        txtId.setText("");
        txtCupos.setText("");
        jDateChooser1.setDate(null);
        txtCupos1.setText("");
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnClose;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnUndo;
    private javax.swing.JButton btnUpdate;
    private com.toedter.calendar.JDateChooser jDateChooser1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblCupos;
    private javax.swing.JLabel lblFecha;
    private javax.swing.JLabel lblFecha1;
    private javax.swing.JLabel lblId;
    private javax.swing.JPanel pnlCentro;
    private javax.swing.JPanel pnlEste;
    private javax.swing.JPanel pnlSur;
    private javax.swing.JTable tblData;
    private javax.swing.JTextField txtCupos;
    private javax.swing.JTextField txtCupos1;
    private javax.swing.JTextField txtId;
    // End of variables declaration//GEN-END:variables
}
