package blood4life.User.presentacion.Cliente;

import blood4life.User.domain.commands.Command;
import blood4life.User.domain.commands.FindAllCommand;
import blood4life.User.domain.commands.Invoker;
import blood4life.User.domain.services.GestorServicesImpl;
import blood4life.User.domain.services.ServicesEnum;
import blood4life.commons.domain.Cita;
import java.sql.Date;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 * Es un observador
 *
 * @author ahurtado
 */
public class GuiCitasDisponibles extends javax.swing.JFrame {

    Invoker inv;
    GestorServicesImpl ser;
    JTable table;
    DefaultTableModel model;
    Date before;
    Date after;
    int lugarCita;
    List<Cita> listaCita;

    /**
     * Creates new form GUIListadoProductos
     *
     * @param service servicio
     */
    public GuiCitasDisponibles() {
    }

    public GuiCitasDisponibles(GestorServicesImpl ser) {
        parametrosInicializacion(ser);
    }

    @SuppressWarnings({"unchecked", "rawtypes"})
    public GuiCitasDisponibles(GestorServicesImpl ser, Date before, Date after, int lugarCita) throws Exception {
        inv = new Invoker();
        parametrosInicializacion(ser);
        this.before = before;
        this.after = after;
        this.lugarCita = lugarCita;
        this.listaCita = new ArrayList();
        actualizarInfo();
        update();
    }

    @SuppressWarnings({"unchecked", "rawtypes"})
    private void actualizarInfo() throws Exception {
        ArrayList<Object> args = new ArrayList();
        args.add(before);
        args.add(after);
        args.add(lugarCita);
        Command cmd = new FindAllCommand(args, ser.getImpl(ServicesEnum.CitaService));
        inv.setCommand(cmd);
        inv.execute();
        FindAllCommand cmdfa = (FindAllCommand) inv.getCommand();
        listaCita = (List<Cita>) cmdfa.getList();
    }

    private void parametrosInicializacion(GestorServicesImpl ser) {
        initComponents();
        this.ser = ser;
        this.model = new DefaultTableModel();
        model.addColumn("Hora");
        table = new JTable(model);
        jPanel2.add(new JScrollPane(table));
        setSize(500, 200);
        setLocation(10, 50);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        btnModificar = new javax.swing.JButton();
        btnCerrar = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Citas Disponibles");
        getContentPane().add(jLabel1, java.awt.BorderLayout.PAGE_START);

        btnModificar.setText("Reservar");
        btnModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModificarActionPerformed(evt);
            }
        });
        jPanel1.add(btnModificar);

        btnCerrar.setText("Cerrar");
        btnCerrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCerrarActionPerformed(evt);
            }
        });
        jPanel1.add(btnCerrar);

        getContentPane().add(jPanel1, java.awt.BorderLayout.PAGE_END);
        getContentPane().add(jPanel2, java.awt.BorderLayout.LINE_END);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCerrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCerrarActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_btnCerrarActionPerformed

    private void btnModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModificarActionPerformed

        int index = table.getSelectedRow();
        if (!listaCita.isEmpty() && index != -1) {
            new GUISolicitarCita(listaCita.get(index), ser).setVisible(true);
            this.setVisible(false);
        } else {
            if (index < 0) {
                JOptionPane.showMessageDialog(null, "Debe seleccionar una cita para continuar");
            }else
            {
                JOptionPane.showMessageDialog(null, "Sin coincidencias para la busqueda");
            }
        }

    }//GEN-LAST:event_btnModificarActionPerformed

    public void update() {
        this.setVisible(true);
        model.setRowCount(0);
        for (Cita c : listaCita) {
            model.addRow(new Object[]{"" + c.getHora()});
        }
        table.paintImmediately(table.getBounds());
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCerrar;
    private javax.swing.JButton btnModificar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    // End of variables declaration//GEN-END:variables

}
